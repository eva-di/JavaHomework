package homework_48.grouping;

import java.util.*;
import java.util.stream.Collectors;

/*
–ó–∞–¥–∞–Ω–∏—è:
–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–ª–µ major) –≤ Map<String, List>.

–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Set
–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É (year), –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏ –∏—Ö –≤ –≤–∏–¥–µ Set.

–ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Å—Ç—Ä–æ–π Map<String, Long>, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Å—Ç—Ä–æ–π Map<String, Double>, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

–°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Å—Ç—Ä–æ–π Map<String, List>, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

–°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
–ò—Å–ø–æ–ª—å–∑—É–π IntSummaryStatistics, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:

–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç,
–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç,
—Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç,
–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤,
—Å—É–º–º—É –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
–í—Å—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ main().
–ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å toString() –≤ –∫–ª–∞—Å—Å Student –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞.
–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stream API –∏ Collectors –∫–∞–∫ –Ω–∞ —É—Ä–æ–∫–µ.
üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É, –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ‚Üí Map<Integer, Map<String, List>>

 */
public class StudentGrouping {
    public static void main(String[] args) {

        List<Student> students = new ArrayList<>(
                List.of(
                        new Student("John", 18, "IT", 1, 2.0),
                        new Student("Christina", 20, "IT", 3, 1.6),
                        new Student("Sam", 18, "IT", 1, 2.5),
                        new Student("Dan", 21, "Management", 5, 3.0),
                        new Student("Helen", 21, "Management", 5, 2.0),
                        new Student("Carl", 20, "Management", 4, 2.3),
                        new Student("Steve", 18, "Physics", 1, 1.0),
                        new Student("Maria", 19, "Physics", 3, 3.0),
                        new Student("Ian", 25, "Agriculture", 5, 2.0),
                        new Student(null, 18, "Agriculture", 4, 2.1)

                )
        );

        Map<String, List<Student>> majorSort = students.stream()
                .filter(Objects::nonNull)
                .map(s -> s.getName() == null ? new Student("Unknown", s.getAge(), s.getMajor(), s.getYear(), s.getGrade()) : s)
                .collect(Collectors.groupingBy(Student::getMajor));
        printMap(majorSort);


        Map<Integer, Set<Student>> groupByYear = students.stream()
                .filter(Objects::nonNull)
                .map(s -> s.getName() == null ? new Student("Unknown", s.getAge(), s.getMajor(), s.getYear(), s.getGrade()) : s)
                .collect(Collectors.groupingBy(Student::getYear, Collectors.toSet()));
        printMap(groupByYear);


        Map<String, Long> studentCount = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.counting()));
        printMap(studentCount);


        Map<String, Double> averageGrade = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.averagingDouble(Student::getGrade)));
        printMap(averageGrade);


        Map<String, List<Double>> gradesList = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor,
                        Collectors.mapping(Student::getGrade, Collectors.toList())));
        printMap(gradesList);

        IntSummaryStatistics statistics = students.stream()
                .collect(Collectors.summarizingInt(Student::getAge));

        System.out.println("–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: " + statistics.getMin());
        System.out.println("–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: " + statistics.getMax());
        System.out.println("—Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: " + statistics.getAverage());
        System.out.println("–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: " + statistics.getCount());
        System.out.println("—Å—É–º–º—É –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.: " + statistics.getSum());

        Map<Integer, Map<String, List<Student>>> yearMajorGroup = students.stream()
                .collect(Collectors.groupingBy(Student::getYear,
                        Collectors.groupingBy(Student::getMajor)));
                printMap(yearMajorGroup);


    }



    private static <K, V> void printMap(Map<K, V> map) {
        map.forEach((k, v) -> System.out.println(k +":" + v));
        System.out.println("=====================\n");
}
    }

