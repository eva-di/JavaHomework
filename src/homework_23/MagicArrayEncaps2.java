package homework_23;

import java.util.Arrays;

public class MagicArrayEncaps2 {
    private int[] array; // null
    private int cursor; // по умолчанию он получит значение = 0

    // методы, расширяющие функционал массива

    public MagicArrayEncaps2() {
        this.array = new int[10]; // [0, 0, 0, ...]
    }

    public MagicArrayEncaps2(int[] array) {
        if (array == null || array.length == 0) {
            this.array = new int[10];
        } else {
            this.array = new int [array.length * 2];
            // int numbers может принять ссылку на массив int []
            add(array); // переиспользуем код
        }
    }

    // Добавление в массив одного элемента
    public void add(int value) {

        //проверка! Есть ли свободное место во внутреннем массиве!
        // Если места нет - нужно добавить место

        if (cursor == array.length) {
            //расширить внутренний массив перед добавлением нового значения
            expandArray();
        }

        array[cursor] = value;
        cursor++;

    }
    // Метод динамического расширения массива
     private void expandArray() {
        System.out.println("Расширяем внутренний массив! Курсор равен " + cursor);
        /*
        1. Создать новый массив бОльшего размера (в 2 раза больше)
        2. Переписать в новый массив все значения до курсора из старого
        3. Перебросить ссылку
         */

        // 1.
        int[] newArray = new int[array.length * 2];
        // 2.
        for (int i = 0; i < cursor; i++) {
            newArray[i] = array[i];
        }
        // 3. Перебрасываем ссылку. Переменная array  хранит ссылку на новый массив
        array = newArray;

    }

    // Добавление в массив нескольких элементов

    public void add(int ... numbers) { // может принять любое количество int
        // Последовательность (секвенция)
        // c numbers я могу обращаться точно так же как со ссылкой на ма массив int
        System.out.println("Принял несколько int: " + numbers.length);
        System.out.println(Arrays.toString(numbers));
        System.out.println("У каждого инта есть индекс как в массиве: " + numbers[0]);

        // Перебираю все значения. ДЛя каждого вызываю метод add()
        for (int i = 0; i < numbers.length; i++) {
            add(numbers[i]);
        }
    }
    // Возвращает строковое представление массива
    // [5, 20, 45]
    public String toString() {

        if (cursor == 0) return "[]";

        String result = "[";
        for (int i = 0; i < cursor; i++) {
            result += array[i] + (i < cursor - 1 ? ", " : "]");
        }

        return result;

    }
    // Текущее кол-во элементов в массиве
    public int size() {
        return cursor;
    }

    // Возвращает значение по индексу
    public int get (int index) {
        // Проконтролировать входящий индекс

        if (index >= 0 && index < cursor) {
            return array[index];
        }

        // Fixme Указать место кода, где есть ошибка / проблема
        //
        // Код, если индекс не корректный
        // Хорошего решения нет
        return-2_147_483_647;
        // Todo Поправить обработку некорректного индекса

    }

    // Удалить элемент по индексу. Вернуть старое значение
    public int remove(int index) {
        /*
        1.Проверка индекса на валидность
        2. Удалить значение по индексу
        3. Передвинуть курсор, так как кол-во элементов уменьшилось
        4. Вернуть старое значение
         */
        if (index >= 0 && index < cursor) {
            // Логика удаления
            int value = array[index]; // Запомнить старое значение

            // Перебираю элементы начиная с индекса и перезаписываю значение из ячейки справа
            // Fixme
            for (int i = index; i < cursor -1; i++) { // Граница перебора индексов
                array[i] = array[i + 1];

            }
            cursor--;

            return value; // Вернуть старое значение

        } else {
            // Индекс невалидный
            // Todo поправить возвращаемое значение
            return-2_147_483_647;
        }
    }

    // Поиск по значению. Возвращать индекс.
    // [1, 100, 5, 24, 0] -> Найди число indexOf(5) = 2, indexOf(50) = -1; (несуществующий индекс)
    public int indexOf (int value) {
        // Перебираю все значимые элементы
        // Если элемент равен искомому - вернтуь индекс такого элемента
        // Если перебрал все элементы - не нашел совпадений - вернуть -1

        for (int i = 0; i < cursor; i++) {
            if (array[i] == value) {
                // Значения совпали. Возвращаю индекс
                return i;
            }
        }
        // Если сюда мы попадем, если ни одно значение в массиве не совпало
        return -1;
    }
    // Удаление элемента по значению. Возвращает boolean

    // Индекс последнего вхождения
    // [1, 100. 5, 100, 24, 0, 100] -> lastIndexOf(100) -> 6 (запоминаем значение, перезапоминаем, если нашли/ не нашли)
    public int lastIndexOf(int value) {
       for (int i = cursor - 1; i >= 0; i--) {
            if (array[i] == value) return i;

        }
        return -1;
    }
        /*int index = -1;
        for (int i = 0; i < cursor; i--) {
            if (array[i] == value) {
                //значения совпали, обновляю переменную index
                index = i;
            }
        }
        return index;
    }*/


    // Удаление по значению
    /*
    1. Есть ли элемент с таким значением - indexOf
    2. Если элемента нет, ничего не делаем,
    не пытаемся удалить, возвращаем false
    3. Если элемент найден - удалить - вернуть true
     */
    public boolean removeByValue (int value) {

        int index = indexOf(value);
        if (index < 0) return false;
        // В эту строчку кода попадем, только при index => 0
        remove(index);
        return true;



    // int[] findAllValues(int value) {
        // todo homework optional***
   }
   // Todo homework_23
// массив, состоящий из элементов магического массива
   public int[] toArray() {
       int[] result = new int[cursor];
       for (int i = 0; i < cursor; i++) {
           result[i] = array[i];
       }
       return result;
   }

    private void test() {
        System.out.println(Arrays.toString(array));
    }

}
// [5, 20] без ноликов
/*
1. Добавлять в массив элемент (не думаю об индексах, размере массива)
2. Динамическое изменение размера внутреннего массива
3. Возвратить строковое представление массива
(все элементы массива в одной строке)
4. Добавить в массив сразу несколько значений ++
5. Текущее кол-во элементов в массиве
6. Возвращает значение по индексу
7. Удалить элемент по индексу (есть индекс - удалить элемент из массива) Возвращает старое значение.
8. Удаление по значению из массива. Возвращал boolean. Если удалил - true, если нет - false
9. Поиск по значению. Возвращать индекс первого вхождения элемента
10. Индекс последнего вхождения
11. Конструктор, принимающий обычный массив. Создать магический массив с элементами из этого массива
12. Написать метод, который вернет массив, состоящий из элементов магческого массива

 */